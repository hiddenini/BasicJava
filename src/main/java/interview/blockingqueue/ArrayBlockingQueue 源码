1--add(object)  队列没满的话，放入成功。否则抛出异常
            public boolean add(E e) {
                // 调用offer(e)如果成功返回true，如果失败抛出异常
                if (offer(e))
                    return true;
                else
                    throw new IllegalStateException("Queue full");
            }

2--offer(e) 表示如果可能的话,将object加到BlockingQueue里,即如果BlockingQueue可以容纳,
            则返回true,否则返回false.（本方法不阻塞当前执行方法的线程）
             // 元素不可为空
            public boolean offer(E e) {
                checkNotNull(e);
                final ReentrantLock lock = this.lock;
                lock.lock();
                try {
                     // 如果数组满了就返回false
                    if (count == items.length)
                        return false;
                    else {
                        // 如果数组没满就调用入队方法并返回true
                        enqueue(e);
                        return true;
                    }
                } finally {
                    lock.unlock();
                }
            }

3--put()

        public void put(E e) throws InterruptedException {
            checkNotNull(e);
            final ReentrantLock lock = this.lock;
            // 加锁，如果线程中断了抛出异常
            lock.lockInterruptibly();
            try {
              // 如果数组满了，使用notFull等待
              // notFull等待的意思是说现在队列满了
              // 只有取走一个元素后，队列才不满
              // 然后唤醒notFull，然后继续现在的逻辑
              // 这里之所以使用while而不是if
              // 是因为有可能多个线程阻塞在lock上
              // 即使唤醒了可能其它线程先一步修改了队列又变成满的了
              // 这时候需要再次等待
                while (count == items.length)
                    notFull.await();
              // 入队
                enqueue(e);
            } finally {
                // 解锁
                lock.unlock();
            }
        }

4--enqueue(E x)
        private void enqueue(E x) {
            final Object[] items = this.items;
            // 把元素直接放在放指针的位置上
            items[putIndex] = x;
            // 如果放指针到数组尽头了，就返回头部
            if (++putIndex == items.length)
                putIndex = 0;
            count++;
             // 唤醒notEmpty，因为入队了一个元素，所以肯定不为空了
            notEmpty.signal();
        }

（1）add(e)时如果队列满了则抛出异常

（2）offer(e)时如果队列满了则返回false

（3）put(e)时如果队列满了则使用notFull等待

（4）offer(e, timeout, unit)时如果队列满了则等待一段时间后如果队列依然满就返回false

（5）利用放指针循环使用数组来存储元素


5--remove()
    public E remove() {
        // 调用poll()方法出队
        E x = poll();
        if (x != null)
            // 如果有元素出队就返回这个元素
            return x;
        else
            // 如果没有元素出队就抛出异常
            throw new NoSuchElementException();
    }



6--poll()

    public E poll() {
       final ReentrantLock lock = this.lock;
       // 加锁
       lock.lock();
       try {
           // 如果队列没有元素则返回null，否则出队
           return (count == 0) ? null : dequeue();
       } finally {
           lock.unlock();
       }
   }


7--poll(time) 取走BlockingQueue里排在首位的对象,若不能立即取出,则可以等time参数规定的时间
               取不到时返回null;

        public void put(E e) throws InterruptedException {
            checkNotNull(e);
            final ReentrantLock lock = this.lock;
            lock.lockInterruptibly();
            try {
                while (count == items.length)
                    notFull.await();
                enqueue(e);
            } finally {
                lock.unlock();
            }
        }

8--poll(long timeout, TimeUnit unit) 从BlockingQueue取出一个队首的对象，如果在指定时间内
            队列一旦有数据可取，则立即返回队列中的数据。否则知道时间超时还没有数据可取，返回失败。

                public E poll(long timeout, TimeUnit unit) throws InterruptedException {
                    long nanos = unit.toNanos(timeout);
                    final ReentrantLock lock = this.lock;
                    lock.lockInterruptibly();
                    try {
                       // 如果队列无元素，则阻塞等待nanos纳秒
                      // 如果下一次这个线程获得了锁但队列依然无元素且已超时就返回null
                        while (count == 0) {
                            if (nanos <= 0)
                                return null;
                            nanos = notEmpty.awaitNanos(nanos);
                        }
                        return dequeue();
                    } finally {
                        lock.unlock();
                    }
                }


9--take() 取走BlockingQueue里排在首位的对象,若BlockingQueue为空,阻断进入等待状态直到BlockingQueue有新的数据被加入;

            public E take() throws InterruptedException {
                final ReentrantLock lock = this.lock;
                lock.lockInterruptibly();
                try {
                    while (count == 0)
                         // 如果队列无元素，则阻塞等待在条件notEmpty上
                        notEmpty.await();
                    // 有元素了再出队
                    return dequeue();
                } finally {
                    lock.unlock();
                }
            }

10--dequeue()

    private E dequeue() {
        final Object[] items = this.items;
        @SuppressWarnings("unchecked")
        // 取取指针位置的元素
        E x = (E) items[takeIndex];
        // 把取指针位置设为null
        items[takeIndex] = null;
        // 取指针前移，如果数组到头了就返回数组前端循环利用
        if (++takeIndex == items.length)
            takeIndex = 0;
        // 元素数量减1
        count--;
        if (itrs != null)
            itrs.elementDequeued();
        // 唤醒notFull条件
        notFull.signal();
        return x;
    }

（1）remove()时如果队列为空则抛出异常

（2）poll()时如果队列为空则返回null

（3）take()时如果队列为空则阻塞等待在条件notEmpty上

（4）poll(timeout, unit)时如果队列为空则阻塞等待一段时间后如果还为空就返回null

（5）利用取指针循环从数组中取元素


11--drainTo()  一次性从BlockingQueue获取所有可用的数据对象（还可以指定获取数据的个数），通过该方法
                可以提升获取数据效率；不需要多次分批加锁或释放锁。

总结
（1）ArrayBlockingQueue不需要扩容，因为是初始化时指定容量，并循环利用数组

（2）ArrayBlockingQueue利用takeIndex和putIndex循环利用数组

（3）入队和出队各定义了四组方法为满足不同的用途

（4）利用重入锁和两个条件保证并发安全


一个由数组支持的有界队列，此队列按FIFO（先进先出）原则对元素进行排序。
新元素插入到队列的尾部，队列获取操作则是从队列头部开始获得元素
这是一个简单的“有界缓存区”，一旦创建，就不能在增加其容量
在向已满队列中添加元素会导致操作阻塞，从空队列中提取元素也将导致阻塞
此类支持对等待的生产者线程和使用者线程进行排序的可选公平策略。默认情况下
不保证是这种排序的。然而通过将公平性（fairness）设置为true，而构造的队列允许按照FIFO顺序访问线程
公平性通常会降低吞吐量，但也减少了可变性和避免了“不平衡性”

    private void enqueue(E x) {

           notEmpty.signal();

    }


     public E take() throws InterruptedException {

               while (count == 0)
                     notEmpty.await();
     }

         public void put(E e) throws InterruptedException {

                 while (count == items.length)
                     notFull.await();
                 enqueue(e);

         }

             private E dequeue() {

                 notFull.signal();

             }