1--putVal()
        final V putVal(K key, V value, boolean onlyIfAbsent) {
            //key和value都不能为空
            if (key == null || value == null) throw new NullPointerException();
            //求hash值 进行扰动 得到的结果一定是一个正数
            //return (h ^ (h >>> 16)) & HASH_BITS;
            //HASH_BITS 二进制是011111111.... 保证最高位是0
            int hash = spread(key.hashCode());
            //用来记录所在table数组中的桶的中链表的个数，后面会用于判断是否链表过长需要转红黑树
            int binCount = 0;
            for (Node<K,V>[] tab = table;;) {
                Node<K,V> f; int n, i, fh;
                if (tab == null || (n = tab.length) == 0)
                    tab = initTable();
                    //hash之后看该位置是否有元素 没有则直接cas插入
                else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {
                    if (casTabAt(tab, i, null,
                                 new Node<K,V>(hash, key, value, null)))
                        break;                   // no lock when adding to empty bin
                }
                //如果hash得到的hash值为MOVED 证明正在扩容 那么协助扩容
                else if ((fh = f.hash) == MOVED)
                    tab = helpTransfer(tab, f);
                else {
                //否则进行添加
                    V oldVal = null;
                    //对当前桶加锁 执行添加操作
                    synchronized (f) {
                        if (tabAt(tab, i) == f) {
                        //如果是普通链表节点 那么执行链表操作
                            if (fh >= 0) {
                                binCount = 1;
                                for (Node<K,V> e = f;; ++binCount) {
                                    K ek;
                                    //如果找到了同样的key那么进行覆盖
                                    if (e.hash == hash &&
                                        ((ek = e.key) == key ||
                                         (ek != null && key.equals(ek)))) {
                                        oldVal = e.val;
                                        if (!onlyIfAbsent)
                                            e.val = value;
                                        break;
                                    }
                                    //否则插入到链表的最后
                                    Node<K,V> pred = e;
                                    if ((e = e.next) == null) {
                                        pred.next = new Node<K,V>(hash, key,
                                                                  value, null);
                                        break;
                                    }
                                }
                            }
                            else if (f instanceof TreeBin) {
                                Node<K,V> p;
                                binCount = 2;
                                if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,
                                                               value)) != null) {
                                    oldVal = p.val;
                                    if (!onlyIfAbsent)
                                        p.val = value;
                                }
                            }
                        }
                    }
                    if (binCount != 0) {
                    //如果链表节点大于等于TREEIFY_THRESHOLD 8
                        if (binCount >= TREEIFY_THRESHOLD)
                        //树化 不一定一定树化
                            treeifyBin(tab, i);
                        if (oldVal != null)
                            return oldVal;
                        break;
                    }
                }
            }
            //维护长度 以及是否需要扩容
            addCount(1L, binCount);
            return null;
        }

2--treeifyBin()

        private final void treeifyBin(Node<K,V>[] tab, int index) {
            Node<K,V> b; int n, sc;
            if (tab != null) {
            //如果tab数组的长度<MIN_TREEIFY_CAPACITY  64 那么 resizes instead
                if ((n = tab.length) < MIN_TREEIFY_CAPACITY)
                    tryPresize(n << 1);
                    //否则进行树化
                else if ((b = tabAt(tab, index)) != null && b.hash >= 0) {
                    synchronized (b) {
                        if (tabAt(tab, index) == b) {
                            TreeNode<K,V> hd = null, tl = null;
                            for (Node<K,V> e = b; e != null; e = e.next) {
                                TreeNode<K,V> p =
                                    new TreeNode<K,V>(e.hash, e.key, e.val,
                                                      null, null);
                                if ((p.prev = tl) == null)
                                    hd = p;
                                else
                                    tl.next = p;
                                tl = p;
                            }
                            setTabAt(tab, index, new TreeBin<K,V>(hd));
                        }
                    }
                }
            }
        }


3--addCount（）

           private final void addCount(long x, int check) {
           //维护集合长度
               CounterCell[] as; long b, s;
               if ((as = counterCells) != null ||
                   !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) {
                   CounterCell a; long v; int m;
                   boolean uncontended = true;
                   if (as == null || (m = as.length - 1) < 0 ||
                       (a = as[ThreadLocalRandom.getProbe() & m]) == null ||
                       !(uncontended =
                         U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) {
                       fullAddCount(x, uncontended);
                       return;
                   }
                   if (check <= 1)
                       return;
                   s = sumCount();
               }
                //进行扩容
               if (check >= 0) {
                   Node<K,V>[] tab, nt; int n, sc;
                   while (s >= (long)(sc = sizeCtl) && (tab = table) != null &&
                          (n = tab.length) < MAXIMUM_CAPACITY) {
                       int rs = resizeStamp(n);
                       if (sc < 0) {
                           if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||
                               sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||
                               transferIndex <= 0)
                               break;
                           if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))
                               transfer(tab, nt);
                       }
                       else if (U.compareAndSwapInt(this, SIZECTL, sc,
                                                    (rs << RESIZE_STAMP_SHIFT) + 2))
                           transfer(tab, null);
                       s = sumCount();
                   }
               }
           }





4--fullAddCount()

cas     +    baseCount   +   CounterCell


5--sumCount() 集合的长度就等于baseCount累加上counterCells中所有值
    baseCount+counterCells[i]

6--

3--sizeCtl
      sizeCtl为0 代表数组未初始化 且数组的初始化容量为16
      sizeCtl为正数 如果数组未初始化 那么记录的是数组的初始化容量 如果数组已经初始化 那么记录的是数组的扩容阈值(数组的初始容量*0.75)
      sizeCtl为-1 表示数组正在进行初始化
      sizeCtl小于0 并且不是-1 表示数组正在扩容-(1+n) 表示此时有n个线程正在共同完成数组的扩容操作


4--initTable()
            private final Node<K,V>[] initTable() {
                Node<K,V>[] tab; int sc;
                while ((tab = table) == null || tab.length == 0) {
                //如果size的值<0 说明此时正在初始化 让出cpu
                    if ((sc = sizeCtl) < 0)
                        Thread.yield(); // lost initialization race; just spin
                    //cas设置SIZECTL为-1
                    else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {
                        try {
                        //dcl检查
                            if ((tab = table) == null || tab.length == 0) {
                                int n = (sc > 0) ? sc : DEFAULT_CAPACITY;
                                @SuppressWarnings("unchecked")
                                Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];
                                table = tab = nt;
                                sc = n - (n >>> 2);
                            }
                        } finally {
                            //设置sizeCtl为扩容阈值
                            sizeCtl = sc;
                        }
                        break;
                    }
                }
                return tab;
            }

5--ForwardingNode

    一个特殊的Node节点，hash值为-1，其中存储nextTable的引用。
    只有table发生扩容的时候，ForwardingNode才会发挥作用，作为一个占位符放在table中表示当前节点为null或则已经被移动

6--HashMap在进行扩容时，使用的rehash方式非常巧妙，因为每次扩容都是翻倍
    与原来计算的 (n-1)&hash的结果相比，只是多了一个bit位，所以结点要么就在原来的位置，要么就被分配到"原位置+旧容量"这个位置。

7--tranfer()
    private final void transfer(Node<K,V>[] tab, Node<K,V>[] nextTab) {
        int n = tab.length, stride;
       //确定线程负责数组大小的范围
        if ((stride = (NCPU > 1) ? (n >>> 3) / NCPU : n) < MIN_TRANSFER_STRIDE)
            stride = MIN_TRANSFER_STRIDE; // subdivide range
        //判断新的数组是否为null，为空则进行创建，比如数组原来的大小是16,2的N次幂，扩容也需要双倍扩容
        if (nextTab == null) {            // initiating
            try {
                @SuppressWarnings("unchecked")
                //采用位移运算进行双倍扩容
                Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n << 1];
                nextTab = nt;
            } catch (Throwable ex) {      // try to cope with OOME
                sizeCtl = Integer.MAX_VALUE;
                return;
            }
            nextTable = nextTab;
            //使用transferIndex变量记录数组的大小，表示线程进行扩容的时候，是从后往前进行的
            transferIndex = n;
        }
        int nextn = nextTab.length;
        //作为一个占位符放在table中表示当前节点为null或则已经被移动
        ForwardingNode<K,V> fwd = new ForwardingNode<K,V>(nextTab);
        boolean advance = true;
        boolean finishing = false; // to ensure sweep before committing nextTab
        for (int i = 0, bound = 0;;) {
            Node<K,V> f; int fh;
            while (advance) {
                int nextIndex, nextBound;
                //一个数组下标一个数组下标的处理
                if (--i >= bound || finishing)
                    advance = false;
                 //表示已经没有需要搬运的节点了，将advance赋值为false
                else if ((nextIndex = transferIndex) <= 0) {
                    i = -1;
                    advance = false;
                }
                //不同的线程搬运的内容，不断地将transferindex的值变小
                else if (U.compareAndSwapInt
                         (this, TRANSFERINDEX, nextIndex,
                          nextBound = (nextIndex > stride ?
                                       nextIndex - stride : 0))) {
                    bound = nextBound;
                    i = nextIndex - 1;
                    advance = false;
                }
            }
            if (i < 0 || i >= n || i + n >= nextn) {
                int sc;
                //finishing等于true就表示所有的线程都搬运完了，做最后的收尾工作
               //比如将新数组的内容赋值到table，扩容标准由原来的12变成24
                if (finishing) {
                    nextTable = null;
                    table = nextTab;
                    sizeCtl = (n << 1) - (n >>> 1);
                    return;
                }
                 //这里是每次有一个线程完成搬运工作，就将线程总数量-1
                if (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) {
                    if ((sc - 2) != resizeStamp(n) << RESIZE_STAMP_SHIFT)
                        return;
                    finishing = advance = true;
                    i = n; // recheck before commit
                }
            }
            //如果某个线程的某个数组下标搬运完成，则将该头节点赋值为fwd类型的，其实就是hash值为MOVED
            else if ((f = tabAt(tab, i)) == null)
                advance = casTabAt(tab, i, null, fwd);
            //表示已经搬运完成
            else if ((fh = f.hash) == MOVED)
                advance = true; // already processed
            else {
                synchronized (f) {
                 //再次检查当前数组下标的节点是否为f
                    if (tabAt(tab, i) == f) {
                        Node<K,V> ln, hn;
                        if (fh >= 0) {
                            int runBit = fh & n;
                            Node<K,V> lastRun = f;
                            for (Node<K,V> p = f.next; p != null; p = p.next) {
                             //新节点的位置要么在原来的位置，要么在原来的位置+原来数组的大小，这点和hashmap中一样
                                int b = p.hash & n;
                                if (b != runBit) {
                                    runBit = b;
                                    lastRun = p;
                                }
                            }
                            //等于0会走这边
                            if (runBit == 0) {
                                ln = lastRun;
                                hn = null;
                            }
                            //不等于0会走这边
                            else {
                                hn = lastRun;
                                ln = null;
                            }
                            for (Node<K,V> p = f; p != lastRun; p = p.next) {
                                int ph = p.hash; K pk = p.key; V pv = p.val;
                                if ((ph & n) == 0)
                                    ln = new Node<K,V>(ph, pk, pv, ln);
                                else
                                    hn = new Node<K,V>(ph, pk, pv, hn);
                            }
                            setTabAt(nextTab, i, ln);
                            setTabAt(nextTab, i + n, hn);
                            setTabAt(tab, i, fwd);
                            advance = true;
                        }
                         //这里是红黑树迁移的情况
                        else if (f instanceof TreeBin) {
                            TreeBin<K,V> t = (TreeBin<K,V>)f;
                            TreeNode<K,V> lo = null, loTail = null;
                            TreeNode<K,V> hi = null, hiTail = null;
                            int lc = 0, hc = 0;
                            for (Node<K,V> e = t.first; e != null; e = e.next) {
                                int h = e.hash;
                                TreeNode<K,V> p = new TreeNode<K,V>
                                    (h, e.key, e.val, null, null);
                                if ((h & n) == 0) {
                                    if ((p.prev = loTail) == null)
                                        lo = p;
                                    else
                                        loTail.next = p;
                                    loTail = p;
                                    ++lc;
                                }
                                else {
                                    if ((p.prev = hiTail) == null)
                                        hi = p;
                                    else
                                        hiTail.next = p;
                                    hiTail = p;
                                    ++hc;
                                }
                            }
                            ln = (lc <= UNTREEIFY_THRESHOLD) ? untreeify(lo) :
                                (hc != 0) ? new TreeBin<K,V>(lo) : t;
                            hn = (hc <= UNTREEIFY_THRESHOLD) ? untreeify(hi) :
                                (lc != 0) ? new TreeBin<K,V>(hi) : t;
                            setTabAt(nextTab, i, ln);
                            setTabAt(nextTab, i + n, hn);
                            setTabAt(tab, i, fwd);
                            advance = true;
                        }
                    }
                }
            }
        }
    }

 8--helpTransfer()
    final Node<K,V>[] helpTransfer(Node<K,V>[] tab, Node<K,V> f) {
        Node<K,V>[] nextTab; int sc;
        if (tab != null && (f instanceof ForwardingNode) &&
            (nextTab = ((ForwardingNode<K,V>)f).nextTable) != null) {
            int rs = resizeStamp(tab.length);
            while (nextTab == nextTable && table == tab &&
                   (sc = sizeCtl) < 0) {
                if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||
                    sc == rs + MAX_RESIZERS || transferIndex <= 0)
                    break;
                //每当来一个线程帮助扩容，此时就会sc+1，表示多了一个线程
                //其实这块也能和transfer方法中的sc-1对应上，一个线程完成之后就数量-1
                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) {
                    //扩容的方法，注意第二个参数有传入nextTab，原因是当前线程只是协助其他线程扩容
               		//既然其他线程正在扩容，说明这个新数组已经创建好了
                    transfer(tab, nextTab);
                    break;
                }
            }
            return nextTab;
        }
        return table;
    }
